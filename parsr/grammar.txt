Program -> Declaration-list
Declaration-list -> Declaration Declaration-list | ε
Declaration -> Declaration-initial Declaration-prime
Declaration-initial -> Type-specifier #declare_id ID
Declaration-prime -> Fun-declaration-prime | Var-declaration-prime
Var-declaration-prime -> #end ; | [ #pnum NUM ] #declare_arr ;
Fun-declaration-prime -> ( Params ) Compound-stmt
Type-specifier -> int | void
Params -> int ID Param-prime Param-list | void Param-list-void-abtar
Param-list-void-abtar -> ID Param-prime Param-list | ε
Param-list -> , Param Param-list | ε
Param -> Declaration-initial Param-prime
Param-prime -> [ ] | ε
Compound-stmt -> { Declaration-list Statement-list }
Statement-list -> Statement Statement-list | ε
Statement -> Expression-stmt | Compound-stmt | Selection-stmt | Iteration-stmt | Return-stmt | For-stmt
Expression-stmt -> Expression #end ; | break ; | ;
Selection-stmt -> if ( Expression ) Statement else Statement
Iteration-stmt -> while #label ( Expression ) #save Statement #whilejump
Return-stmt -> return Return-stmt-prime
Return-stmt-prime -> ; | Expression ;
For-stmt -> for ID = Vars Statement
Vars -> Var Var-zegond
Var-zegond -> , Var Var-zegond | ε
Var -> ID Var-prime
Expression -> Simple-expression-zegond | #pid ID B
B -> = Expression #assign | [ Expression ] #parr H | Simple-expression-prime
H -> = Expression #assign | G D C
Simple-expression-zegond -> Additive-expression-zegond C
Simple-expression-prime -> Additive-expression-prime C
C -> Relop Additive-expression  #op_exec | ε
Relop -> #op_push < | #op_push ==
Additive-expression -> Term D
Additive-expression-prime -> Term-prime D
Additive-expression-zegond -> Term-zegond D
D -> Addop Term #op_exec D | ε
Addop -> #op_push + | #op_push -
Term -> Signed-factor G
Term-prime -> Signed-factor-prime G
Term-zegond -> Signed-factor-zegond G
G -> #op_push * Signed-factor #op_exec G | ε
Signed-factor -> + Factor | - Factor #negative | Factor
Signed-factor-prime -> Factor-prime
Signed-factor-zegond -> + Factor | - Factor #negative | Factor-zegond
Factor -> ( Expression ) | #pid ID Var-call-prime | #pnum NUM
Var-call-prime -> ( Args ) | Var-prime
Var-prime -> [ Expression ] #parr | ε
Factor-prime -> ( Args ) #output | ε
Factor-zegond -> ( Expression ) | #pnum NUM
Args -> Arg-list | ε
Arg-list -> Expression Arg-list-prime
Arg-list-prime -> , Expression Arg-list-prime | ε