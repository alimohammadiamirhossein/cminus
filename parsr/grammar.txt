Program -> Declarationlist $
Declarationlist -> Declaration Declarationlist | ε
Declaration -> Declarationinitial Declarationprime
Declarationinitial -> Typespecifier ID
Declarationprime -> Fundeclarationprime | Vardeclarationprime
Vardeclarationprime -> ; | [ NUM ] ;
Fundeclarationprime -> ( Params ) Compoundstmt
Typespecifier -> int | void
Params -> int ID Paramprime Paramlist | void Paramlistvoidabtar
Paramlistvoidabtar -> ID Paramprime Paramlist | ε
Paramlist -> , Param Paramlist | ε
Param -> Declarationinitial Paramprime
Paramprime -> [ ] | ε
Compoundstmt -> { Declarationlist Statementlist }
Statementlist -> Statement Statementlist | ε
Statement -> Expressionstmt | Compoundstmt | Selectionstmt | Iterationstmt | Returnstmt
| Forstmt
Expressionstmt -> Expression ; | break ; | ;
Selectionstmt -> if ( Expression ) Statement else Statement
Iterationstmt -> while ( Expression ) Statement
Returnstmt -> return Returnstmtprime
Returnstmtprime -> ; | Expression ;
Forstmt -> for ID = Vars Statement
Vars -> Var Varzegond
Varzegond -> , Var Varzegond | ε
Var -> ID Varprime
Expression -> Simpleexpressionzegond | ID B
B -> = Expression | [ Expression ] H | Simpleexpressionprime
H -> = Expression | G D C
Simpleexpressionzegond -> Additiveexpressionzegond C
Simpleexpressionprime -> Additiveexpressionprime C
C -> Relop Additiveexpression | ε
Relop -> < | ==
Additiveexpression -> Term D
Additiveexpressionprime -> Termprime D
Additiveexpressionzegond -> Termzegond D
D -> Addop Term D | ε
Addop -> + | 
Term -> Signedfactor G
Termprime -> Signedfactorprime G
Termzegond -> Signedfactorzegond G
G -> * Signedfactor G | ε
Signedfactor -> + Factor |  Factor | Factor
Signedfactorprime -> Factorprime
Signedfactorzegond -> + Factor |  Factor | Factorzegond
Factor -> ( Expression ) | ID Varcallprime | NUM
Varcallprime -> ( Args ) | Varprime
Varprime -> [ Expression ] | ε
Factorprime -> ( Args ) | ε
Factorzegond -> ( Expression ) | NUM
Args -> Arglist | ε
Arglist -> Expression Arglistprime
Arglistprime -> , Expression Arglistprime | ε