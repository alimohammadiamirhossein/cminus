from parsr.state import State, Terminal, NonTerminal


class Initializer:
    def __init__(self):
        self.terminals = []
        self.non_terminals = []
        self.terminals.append(Terminal(' ID '))
        self.terminals.append(Terminal(' ; '))
        self.terminals.append(Terminal(' [ '))
        self.terminals.append(Terminal(' NUM '))
        self.terminals.append(Terminal(' ] '))
        self.terminals.append(Terminal(' ( '))
        self.terminals.append(Terminal(' ) '))
        self.terminals.append(Terminal(' int '))
        self.terminals.append(Terminal(' void '))
        self.terminals.append(Terminal(' , '))
        self.terminals.append(Terminal(' { '))
        self.terminals.append(Terminal(' } '))
        self.terminals.append(Terminal(' break '))
        self.terminals.append(Terminal(' if '))
        self.terminals.append(Terminal(' else '))
        self.terminals.append(Terminal(' while '))
        self.terminals.append(Terminal(' return '))
        self.terminals.append(Terminal(' for '))
        self.terminals.append(Terminal(' = '))
        self.terminals.append(Terminal(' < '))
        self.terminals.append(Terminal(' == '))
        self.terminals.append(Terminal(' + '))
        self.terminals.append(Terminal(' - '))
        self.terminals.append(Terminal(' * '))
        self.terminals.append(Terminal(' Îµ '))
        self.non_terminals.append(NonTerminal(' Declarationlist '))
        self.non_terminals.append(NonTerminal(' Declaration '))
        self.non_terminals.append(NonTerminal(' Declarationinitial '))
        self.non_terminals.append(NonTerminal(' Declarationprime '))
        self.non_terminals.append(NonTerminal(' Vardeclarationprime '))
        self.non_terminals.append(NonTerminal(' Fundeclarationprime '))
        self.non_terminals.append(NonTerminal(' Typespecifier '))
        self.non_terminals.append(NonTerminal(' Params '))
        self.non_terminals.append(NonTerminal(' Paramlistvoidabtar '))
        self.non_terminals.append(NonTerminal(' Paramlist '))
        self.non_terminals.append(NonTerminal(' Param '))
        self.non_terminals.append(NonTerminal(' Paramprime '))
        self.non_terminals.append(NonTerminal(' Compoundstmt '))
        self.non_terminals.append(NonTerminal(' Statementlist '))
        self.non_terminals.append(NonTerminal(' Statement '))
        self.non_terminals.append(NonTerminal(' Expressionstmt '))
        self.non_terminals.append(NonTerminal(' Selectionstmt '))
        self.non_terminals.append(NonTerminal(' Iterationstmt '))
        self.non_terminals.append(NonTerminal(' Returnstmt '))
        self.non_terminals.append(NonTerminal(' Returnstmtprime '))
        self.non_terminals.append(NonTerminal(' Forstmt '))
        self.non_terminals.append(NonTerminal(' Vars '))
        self.non_terminals.append(NonTerminal(' Varzegond '))
        self.non_terminals.append(NonTerminal(' Var '))
        self.non_terminals.append(NonTerminal(' Expression '))
        self.non_terminals.append(NonTerminal(' B '))
        self.non_terminals.append(NonTerminal(' H '))
        self.non_terminals.append(NonTerminal(' Simpleexpressionzegond '))
        self.non_terminals.append(NonTerminal(' Simpleexpressionprime '))
        self.non_terminals.append(NonTerminal(' C '))
        self.non_terminals.append(NonTerminal(' Relop '))
        self.non_terminals.append(NonTerminal(' Additiveexpression '))
        self.non_terminals.append(NonTerminal(' Additiveexpressionprime '))
        self.non_terminals.append(NonTerminal(' Additiveexpressionzegond '))
        self.non_terminals.append(NonTerminal(' D '))
        self.non_terminals.append(NonTerminal(' Addop '))
        self.non_terminals.append(NonTerminal(' Term '))
        self.non_terminals.append(NonTerminal(' Termprime '))
        self.non_terminals.append(NonTerminal(' Termzegond '))
        self.non_terminals.append(NonTerminal(' G '))
        self.non_terminals.append(NonTerminal(' Signedfactor '))
        self.non_terminals.append(NonTerminal(' Signedfactorprime '))
        self.non_terminals.append(NonTerminal(' Signedfactorzegond '))
        self.non_terminals.append(NonTerminal(' Factor '))
        self.non_terminals.append(NonTerminal(' Varcallprime '))
        self.non_terminals.append(NonTerminal(' Varprime '))
        self.non_terminals.append(NonTerminal(' Factorprime '))
        self.non_terminals.append(NonTerminal(' Factorzegond '))
        self.non_terminals.append(NonTerminal(' Args '))
        self.non_terminals.append(NonTerminal(' Arglist '))
        self.non_terminals.append(NonTerminal(' Arglistprime '))

    def find_state(self, name):
        for k in self.terminals:
            if k.name == name:
                return k
        for k in self.non_terminals:
            if k.name == name:
                return k
        return -1
