from parsr.state import State, Terminal, NonTerminal


class Initializer:
    def __init__(self):
        self.terminals = []
        self.non_terminals = []

        self.terminals.append(Terminal('ID'))
        self.terminals.append(Terminal(';'))
        self.terminals.append(Terminal('['))
        self.terminals.append(Terminal('NUM'))
        self.terminals.append(Terminal(']'))
        self.terminals.append(Terminal('('))
        self.terminals.append(Terminal(')'))
        self.terminals.append(Terminal('int'))
        self.terminals.append(Terminal('void'))
        self.terminals.append(Terminal(','))
        self.terminals.append(Terminal('{'))
        self.terminals.append(Terminal('}'))
        self.terminals.append(Terminal('break'))
        self.terminals.append(Terminal('if'))
        self.terminals.append(Terminal('else'))
        self.terminals.append(Terminal('while'))
        self.terminals.append(Terminal('return'))
        self.terminals.append(Terminal('for'))
        self.terminals.append(Terminal('='))
        self.terminals.append(Terminal('<'))
        self.terminals.append(Terminal('=='))
        self.terminals.append(Terminal('+'))
        self.terminals.append(Terminal('-'))
        self.terminals.append(Terminal('*'))
        self.terminals.append(Terminal('Îµ'))
        self.terminals.append(Terminal("â™¤"))
        self.non_terminals.append(NonTerminal('Program'))
        self.non_terminals.append(NonTerminal('Declaration-list'))
        self.non_terminals.append(NonTerminal('Declaration'))
        self.non_terminals.append(NonTerminal('Declaration-initial'))
        self.non_terminals.append(NonTerminal('Declaration-prime'))
        self.non_terminals.append(NonTerminal('Var-declaration-prime'))
        self.non_terminals.append(NonTerminal('Fun-declaration-prime'))
        self.non_terminals.append(NonTerminal('Type-specifier'))
        self.non_terminals.append(NonTerminal('Params'))
        self.non_terminals.append(NonTerminal('Param-list-void-abtar'))
        self.non_terminals.append(NonTerminal('Param-list'))
        self.non_terminals.append(NonTerminal('Param'))
        self.non_terminals.append(NonTerminal('Param-prime'))
        self.non_terminals.append(NonTerminal('Compound-stmt'))
        self.non_terminals.append(NonTerminal('Statement-list'))
        self.non_terminals.append(NonTerminal('Statement'))
        self.non_terminals.append(NonTerminal('Expression-stmt'))
        self.non_terminals.append(NonTerminal('Selection-stmt'))
        self.non_terminals.append(NonTerminal('Iteration-stmt'))
        self.non_terminals.append(NonTerminal('Return-stmt'))
        self.non_terminals.append(NonTerminal('Return-stmt-prime'))
        self.non_terminals.append(NonTerminal('For-stmt'))
        self.non_terminals.append(NonTerminal('Vars'))
        self.non_terminals.append(NonTerminal('Var-zegond'))
        self.non_terminals.append(NonTerminal('Var'))
        self.non_terminals.append(NonTerminal('Expression'))
        self.non_terminals.append(NonTerminal('B'))
        self.non_terminals.append(NonTerminal('H'))
        self.non_terminals.append(NonTerminal('Simple-expression-zegond'))
        self.non_terminals.append(NonTerminal('Simple-expression-prime'))
        self.non_terminals.append(NonTerminal('C'))
        self.non_terminals.append(NonTerminal('Relop'))
        self.non_terminals.append(NonTerminal('Additive-expression'))
        self.non_terminals.append(NonTerminal('Additive-expression-prime'))
        self.non_terminals.append(NonTerminal('Additive-expression-zegond'))
        self.non_terminals.append(NonTerminal('D'))
        self.non_terminals.append(NonTerminal('Addop'))
        self.non_terminals.append(NonTerminal('Term'))
        self.non_terminals.append(NonTerminal('Term-prime'))
        self.non_terminals.append(NonTerminal('Term-zegond'))
        self.non_terminals.append(NonTerminal('G'))
        self.non_terminals.append(NonTerminal('Signed-factor'))
        self.non_terminals.append(NonTerminal('Signed-factor-prime'))
        self.non_terminals.append(NonTerminal('Signed-factor-zegond'))
        self.non_terminals.append(NonTerminal('Factor'))
        self.non_terminals.append(NonTerminal('Var-call-prime'))
        self.non_terminals.append(NonTerminal('Var-prime'))
        self.non_terminals.append(NonTerminal('Factor-prime'))
        self.non_terminals.append(NonTerminal('Factor-zegond'))
        self.non_terminals.append(NonTerminal('Args'))
        self.non_terminals.append(NonTerminal('Arg-list'))
        self.non_terminals.append(NonTerminal('Arg-list-prime'))

    def find_state(self, name):
        for k in self.terminals:
            if k.name == name:
                return k
        for k in self.non_terminals:
            if k.name == name:
                return k
        return -1

