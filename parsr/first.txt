Declarationlist → int void ε 
Declaration → int void 
Declarationinitial → int void 
Declarationprime → ; [ ( 
Vardeclarationprime → ; [ 
Fundeclarationprime → ( 
Typespecifier → int void 
Params → int void 
Paramlistvoidabtar → ID ε 
Paramlist → , ε 
Param → int void 
Paramprime → [ ε 
Compoundstmt → { 
Statementlist → ID ; NUM ( { break if while return for + - ε 
Statement → ID ; NUM ( { break if while return for + - 
Expressionstmt → ID ; NUM ( break + - 
Selectionstmt → if 
Iterationstmt → while 
Returnstmt → return 
Returnstmtprime → ID ; NUM ( + - 
Forstmt → for 
Vars → ID 
Varzegond → , ε 
Var → ID 
Expression → ID NUM ( + - 
B → [ ( = < == + - * ε 
H → = < == + - * ε 
Simpleexpressionzegond → NUM ( + - 
Simpleexpressionprime → ( < == + - * ε 
C → < == ε 
Relop → < == 
Additiveexpression → ID NUM ( + - 
Additiveexpressionprime → ( + - * ε 
Additiveexpressionzegond → NUM ( + - 
D → + - ε 
Addop → + - 
Term → ID NUM ( + - 
Termprime → ( * ε 
Termzegond → NUM ( + - 
G → * ε 
Signedfactor → ID NUM ( + - 
Signedfactorprime → ( ε 
Signedfactorzegond → NUM ( + - 
Factor → ID NUM ( 
Varcallprime → [ ( ε 
Varprime → [ ε 
Factorprime → ( ε 
Factorzegond → NUM ( 
Args → ID NUM ( + - ε 
Arglist → ID NUM ( + - 
Arglistprime → , ε 
